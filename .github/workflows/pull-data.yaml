name: Update contents

on:
  # schedule:
  #   - cron: '5 0,4,8,12,16,10 * * *'
  workflow_dispatch: {}

env:
  publish-branch: gh-pages2

jobs:
  update-energy-price-data:
    runs-on: ubuntu-latest
    name: Update energy price data
    outputs:
      changed: ${{ steps.update-energy-price-data.outputs.changed }}
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.POWERCASTDEPLOY }}
          ref: ${{ env.publish-branch }}
          path: github-pages

      - shell: bash
        name: Setup configuration
        run: |
          sh .github/scripts/energy-price-data-matrix.sh .config.json ./github-pages/api/energy-price/ | tee configuration.json

      - shell: bash
        name: Pull data
        run: |
          mkdir -p ./github-pages/api/energy-price/ > /dev/null

          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            LATEST=$(echo "$CONFIG" | jq -r '.latest')

            echo "Pull data for ${ZONE} until ${LATEST}..."
            sh .github/scripts/energy-price-data-pull.sh $ZONE $LATEST > "${ZONE}.generated"
          done

      - shell: bash
        id: update-energy-price-data
        name: Check for new data
        run: |
          echo "::set-output name=changed::false"

          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            LATEST=$(echo "$CONFIG" | jq -r '.latest')
            GENERATED="${ZONE}.generated"

            [ -f "$GENERATED" ] || continue

            NEW=$(sh .github/scripts/energy-price-data-freshness-file.sh $GENERATED $LATEST)

            echo "Checking data for ${ZONE}:"
            echo " - ${LATEST} - current data"
            echo " - ${NEW} - new data"

            if [ $NEW -gt $LATEST ]; then
              echo "::set-output name=changed::true"
            fi
          done

      - shell: bash
        name: Write data
        if: steps.update-energy-price-data.outputs.changed == 'true'
        run: |
          for GENERATED in *.generated; do
            [ -f "$GENERATED" ] || continue
            ZONE=$(basename $GENERATED .generated)
            echo "Using generated data for ${ZONE}..."
            sh .github/scripts/energy-price-data-write.sh $GENERATED ./github-pages/api/energy-price/ $ZONE
          done

      - shell: bash
        name: Index data
        if: steps.update-energy-price-data.outputs.changed == 'true'
        run: |
          sh .github/scripts/energy-price-data-index.sh .config.json ./github-pages/api/energy-price/ /api/energy-price > ./github-pages/api/energy-price/latest.json

      - uses: EndBug/add-and-commit@v9
        name: Publish data
        if: steps.update-energy-price-data.outputs.changed == 'true'
        with:
          cwd: github-pages
          add: api/energy-price/
          push: --set-upstream origin ${{ env.publish-branch }}
          default_author: github_actions
          message: Publish new data via workflow

  update-energy-price-visualization:
    runs-on: ubuntu-latest
    # needs: update-energy-price-data
    name: Update energy price visualization
    # if: needs.update-energy-price-data.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.POWERCASTDEPLOY }}
          ref: ${{ env.publish-branch }}
          path: github-pages

      - shell: bash
        name: Clean up previous visualizations
        run: |
          set -e
          cd ./github-pages/
          ls -Q | grep -v ^\"api\"$ | xargs rm -rf

      - shell: bash
        name: Setup redirects
        run: |
          set -e

          cat .github/resources/redirect.html | sed 's|REDIRECT_URL|//codereaper.github.io/powercast-data/energy-price/|g' > ./github-pages/index.html

      - shell: bash
        name: Generate combined energy price visualization
        run: |
          set -e

          [ -d ./github-pages/api/energy-price/ ] || exit 0

          GROUPS=$(cat .config.json | jq -rcj '. | map(.display.zone=.zone) | map(.display) | group_by(.group) | map({ group: (.[0].group), country: (.[0].country), values: [.[] | del(.group, .country)] })')
          sh .github/scripts/energy-price-data-graph-data.sh .config.json ./github-pages/api/energy-price/ $(date -d -5days +"%s") ./github-pages/energy-price/ '//codereaper.github.io/powercast-data/' '$GROUPS'

      - shell: bash
        name: Generate each country energy price visualization
        run: |
          set -e

          [ -d ./github-pages/api/energy-price/ ] || exit 0

          DATE=$(date -d -5days +"%s")

          cat .config.json | jq -r '. | map(.display.group) | unique | values[]' | while read GROUP; do
            group=$(echo $GROUP | tr '[:upper:]' '[:lower:]')

            cat .config.json | jq -r ". | map(select(.display.group == \"${GROUP}\"))" > group.json

            sh .github/scripts/energy-price-data-graph-data.sh group.json ./github-pages/api/energy-price/ $DATE ./github-pages/energy-price/$group/
          done

      - shell: bash
        name: Generate each zone energy price visualization
        run: |
          set -e

          DATE=$(date -d -5days +"%s")

          cat .config.json | jq -r '.[].zone' | while read AREA; do
            area=$(echo $AREA | tr '[:upper:]' '[:lower:]')

            cat .config.json | jq -r ". | map(select(.zone == \"${AREA}\"))" > area.json

            sh .github/scripts/energy-price-data-graph-data.sh area.json ./github-pages/api/energy-price/ $DATE ./github-pages/energy-price/$area/
          done

      - uses: EndBug/add-and-commit@v9
        name: Publish graph
        with:
          cwd: github-pages
          add: "['index.html', 'data.js', 'energy-price']"
          push: --set-upstream origin ${{ env.publish-branch }}
          default_author: github_actions
          message: Publish new graph via workflow
