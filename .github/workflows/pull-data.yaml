name: Update contents

on:
  schedule:
    - cron: '0 * * * *'
    - cron: '*/5 12,13 * * *'
  workflow_dispatch:
    inputs:
      from-timestamp:
        type: string
        description: Pull data from this timestamp and onwards - requires both from and end timestamps
        required: false
        default: ''
      end-timestamp:
        type: string
        description: Pull data until reaching this timestamp - requires both from and end timestamps
        required: false
        default: ''
  push:
    branches:
      - main
    paths:
      - .github/workflows/pull-data.yaml
      - .github/scripts/data-*.sh
      - .github/scripts/*-data-pull.sh
      - configuration/zones.json

concurrency: commits-pages

env:
  publish-branch: gh-pages

jobs:
  update-energy-price-data:
    runs-on: ubuntu-latest
    name: Update energy price data
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.POWERCASTDEPLOY }}
          ref: ${{ env.publish-branch }}
          path: github-pages

      - shell: bash
        name: Setup configuration
        run: |
          mkdir -p ./github-pages/api/energy-price/ > /dev/null

          sh .github/scripts/data-matrix.sh configuration/zones.json energy-price ./github-pages/api/energy-price/ ${{ inputs.from-timestamp }} ${{ inputs.end-timestamp }} | tee configuration.json
          echo "stale=false" >> $GITHUB_ENV
          echo "changed=false" >> $GITHUB_ENV

      - shell: bash
        name: Check for stale data
        run: |
          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            FROM=$(echo "$CONFIG" | jq -r '.latest')

            NOW=$(date +%s)
            HOURS=$(((FROM-NOW)/3600))

            echo "Checking stale data for ${ZONE}:"
            echo " - ${FROM} - current data"
            echo " - ${NOW} - now"
            echo " - ${HOURS} - hours"

            if [ "$ZONE" = "DE" ]; then
              echo "Ignoring..."
              continue
            fi

            if [ $HOURS -le 12 ]; then
              echo "stale=true" >> $GITHUB_ENV
            fi
          done

      - shell: bash
        name: Pull data
        if: env.stale == 'true'
        run: |
          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            FROM=$(echo "$CONFIG" | jq -r '.latest')
            END=$(echo "$CONFIG" | jq -r '.end')

            echo "Pull data for ${ZONE} until ${END}..."
            sh .github/scripts/energy-price-data-pull.sh $ZONE $FROM $END > "${ZONE}.generated"
            echo "changed=true" >> $GITHUB_ENV
          done

      - shell: bash
        name: Write data
        if: env.changed == 'true'
        run: |
          for GENERATED in *.generated; do
            [ -f "$GENERATED" ] || continue
            ZONE=$(basename $GENERATED .generated)
            echo "Using generated data for ${ZONE}..."
            sh .github/scripts/data-write.sh $GENERATED ./github-pages/api/energy-price/ $ZONE
          done

      - shell: bash
        name: Index data
        if: env.changed == 'true'
        run: |
          rm ./github-pages/api/energy-price/latest.json || true
          sh .github/scripts/data-index.sh configuration/zones.json ./github-pages/api/energy-price/ /api/energy-price > ./github-pages/api/energy-price/index.json

      - uses: EndBug/add-and-commit@v9
        name: Publish data
        if: env.changed == 'true'
        with:
          cwd: github-pages
          add: api/energy-price/
          push: --set-upstream origin ${{ env.publish-branch }}
          default_author: github_actions
          message: Publish energy price data via workflow

  update-renewables-data:
    runs-on: ubuntu-latest
    needs: update-energy-price-data
    name: Update renewables data
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.POWERCASTDEPLOY }}
          ref: ${{ env.publish-branch }}
          path: github-pages

      - shell: bash
        name: Setup configuration
        run: |
          mkdir -p ./github-pages/api/renewables/ > /dev/null

          sh .github/scripts/data-matrix.sh configuration/zones.json renewables-data ./github-pages/api/renewables/ ${{ inputs.from-timestamp }} ${{ inputs.end-timestamp }} | tee configuration.json
          echo "stale=false" >> $GITHUB_ENV
          echo "changed=false" >> $GITHUB_ENV

      - shell: bash
        name: Check for stale data
        run: |
          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            FROM=$(echo "$CONFIG" | jq -r '.latest')

            NOW=$(date +%s)
            HOURS=$(((FROM-NOW)/3600))

            echo "Checking stale data for ${ZONE}:"
            echo " - ${FROM} - current data"
            echo " - ${NOW} - now"
            echo " - ${HOURS} - hours"

            if [ $HOURS -le 12 ]; then
              echo "stale=true" >> $GITHUB_ENV
            fi
          done

      - shell: bash
        name: Pull data
        if: env.stale == 'true'
        run: |
          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            FROM=$(echo "$CONFIG" | jq -r '.latest')
            END=$(echo "$CONFIG" | jq -r '.end')

            echo "Pull data for ${ZONE} until ${END}..."
            sh .github/scripts/renewables-data-pull.sh $ZONE $FROM $END > "${ZONE}.generated"
            echo "changed=true" >> $GITHUB_ENV
          done

      - shell: bash
        name: Write data
        if: env.changed == 'true'
        run: |
          for GENERATED in *.generated; do
            [ -f "$GENERATED" ] || continue
            ZONE=$(basename $GENERATED .generated)
            echo "Using generated data for ${ZONE}..."
            sh .github/scripts/data-write.sh $GENERATED ./github-pages/api/renewables/ $ZONE
          done

      - shell: bash
        name: Index data
        if: env.changed == 'true'
        run: |
          rm ./github-pages/api/renewables/latest.json || true
          sh .github/scripts/data-index.sh configuration/zones.json ./github-pages/api/renewables/ /api/renewables > ./github-pages/api/renewables/index.json

      - uses: EndBug/add-and-commit@v9
        name: Publish data
        if: env.changed == 'true'
        with:
          cwd: github-pages
          add: api/renewables/
          push: --set-upstream origin ${{ env.publish-branch }}
          default_author: github_actions
          message: Publish renewables data via workflow

  update-co2-emission-data:
    runs-on: ubuntu-latest
    needs: update-renewables-data
    name: Update CO2 emission data
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.POWERCASTDEPLOY }}
          ref: ${{ env.publish-branch }}
          path: github-pages

      - shell: bash
        name: Setup configuration
        run: |
          mkdir -p ./github-pages/api/emission/co2/ > /dev/null

          sh .github/scripts/data-matrix.sh configuration/zones.json co2-emission ./github-pages/api/emission/co2/ ${{ inputs.from-timestamp }} ${{ inputs.end-timestamp }} | tee configuration.json
          echo "stale=false" >> $GITHUB_ENV
          echo "changed=false" >> $GITHUB_ENV

      - shell: bash
        name: Check for stale data
        run: |
          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            FROM=$(echo "$CONFIG" | jq -r '.latest')

            NOW=$(date +%s)
            HOURS=$(((FROM-NOW)/3600))

            echo "Checking stale data for ${ZONE}:"
            echo " - ${FROM} - current data"
            echo " - ${NOW} - now"
            echo " - ${HOURS} - hours"

            if [ $HOURS -le 12 ]; then
              echo "stale=true" >> $GITHUB_ENV
            fi
          done

      - shell: bash
        name: Pull data
        if: env.stale == 'true'
        run: |
          jq -rc '.[]' configuration.json | while read CONFIG; do
            ZONE=$(echo "$CONFIG" | jq -r '.zone')
            FROM=$(echo "$CONFIG" | jq -r '.latest')
            END=$(echo "$CONFIG" | jq -r '.end')

            echo "Pull data for ${ZONE} until ${END}..."
            sh .github/scripts/co2-emission-data-pull.sh $ZONE $FROM $END > "${ZONE}.generated"
            echo "changed=true" >> $GITHUB_ENV
          done

      - shell: bash
        name: Write data
        if: env.changed == 'true'
        run: |
          for GENERATED in *.generated; do
            [ -f "$GENERATED" ] || continue
            ZONE=$(basename $GENERATED .generated)
            echo "Using generated data for ${ZONE}..."
            sh .github/scripts/data-write.sh $GENERATED ./github-pages/api/emission/co2/ $ZONE
          done

      - shell: bash
        name: Index data
        if: env.changed == 'true'
        run: |
          rm ./github-pages/api/emission/co2/latest.json || true
          sh .github/scripts/data-index.sh configuration/zones.json ./github-pages/api/emission/co2/ /api/emission/co2 > ./github-pages/api/emission/co2/index.json

      - uses: EndBug/add-and-commit@v9
        name: Publish data
        if: env.changed == 'true'
        with:
          cwd: github-pages
          add: api/emission/co2/
          push: --set-upstream origin ${{ env.publish-branch }}
          default_author: github_actions
          message: Publish co2 emission data via workflow
