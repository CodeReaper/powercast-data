name: Grid Health Check

on:
  workflow_call: {}

permissions:
  contents: read
  issues: write

env:
  minimum-data-amount: 90

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup
    steps:
      - uses: actions/checkout@v4
      - shell: bash
        name: Setup configuration
        run: |
          NOW=$(date +"%s")

          >&2 echo "The required minimum days is ${{ env.minimum-data-amount }}"
          jq -rc '.[] | select(.capabilities | index("grid") | .) | .zone' < configuration/zones.json | while read -r AREA; do
            EXPIRATION=$(jq "[.${AREA} | .[].to] | max" < configuration/grid.json)
            DIFFERENCE=$((EXPIRATION-NOW))
            DAYS=$((DIFFERENCE/86400))
            FORMATTED=$(date -d "@$EXPIRATION" +"%Y-%m-%d")
            >&2 echo "$AREA is valid until $(date -d "@$EXPIRATION" +"%Y-%m-%dT%H:%M:%S%z") or $DAYS days"

            #if [ "$DAYS" -lt "${{ env.minimum-data-amount }}" ]; then
              jq -nc --arg zone "$AREA" --arg expiration "$FORMATTED" '{zone: $zone, expiration: $expiration}'
            #fi
          done | jq -sc > matrix

          echo '::group::Matrix'
          jq < matrix
          echo '::endgroup::'

          echo "matrix=$(jq -c < matrix)" >> "$GITHUB_ENV"
    outputs:
      matrix: ${{ env.matrix }}

  create-issue:
    runs-on: ubuntu-latest
    name: Create issue
    needs: setup
    if: ${{ needs.setup.outputs.matrix != '[]' }}
    strategy:
      matrix:
        item: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare issue
        shell: bash
        run: |
          printf '\n\n--- issue body:\n\n'
          echo "The current data for grid ${{ matrix.item.zone }} will expire at ${{ matrix.item.expiration }}" | tee body
      - shell: bash
        name: Create issue
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          title='Grid ${{ matrix.item.zone }} must be updated'
          gh issue list --label "automated" --limit 1 --state open --search "$title" --json number,title | jq -c '.[]' | tee issues
          [ -s issues ] || exit 0

          gh issue create --assignee codereaper --body-file body --label automated --title "$title"
